{
  "stats": {
    "suites": 6,
    "tests": 27,
    "passes": 27,
    "pending": 0,
    "failures": 0,
    "start": "2019-06-08T19:54:27.620Z",
    "end": "2019-06-08T19:54:29.527Z",
    "duration": 1907,
    "testsRegistered": 27,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0b739314-bd49-496a-8654-15532a5247c6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d83fe9a5-50fd-4a1b-99ed-920a4b3d40b4",
          "title": "Async modules test",
          "fullFile": "/var/www/gabriela/tests/unit/asyncModules.spec.js",
          "file": "/tests/unit/asyncModules.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should assert the first time that next proceedes to next middleware with an async function inside middleware",
              "fullTitle": "Async modules test should assert the first time that next proceedes to next middleware with an async function inside middleware",
              "timedOut": false,
              "duration": 280,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'googleCall';\nconst googleRequest = function(state, next) {\n    requestPromise.get('https://www.google.com/').then((body) => {\n        state.googleBody = body;\n        next();\n    });\n};\nconst mdl = {\n    name: name,\n    moduleLogic: [googleRequest]\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\ng.runModule(g.getModule(name)).then((moduleResult) => {\n    expect(moduleResult).to.have.property('googleBody');\n    done();\n});",
              "err": {},
              "uuid": "7e817c18-78aa-4361-a83a-c6d124e63408",
              "parentUUID": "d83fe9a5-50fd-4a1b-99ed-920a4b3d40b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert the second time that next proceedes to next middleware with an async function inside middleware",
              "fullTitle": "Async modules test should assert the second time that next proceedes to next middleware with an async function inside middleware",
              "timedOut": false,
              "duration": 332,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'googleCall';\nconst googleRequest = function(state, next) {\n    requestPromise.get('https://www.google.com/').then((body) => {\n        state.googleBody = body;\n        next();\n    });\n};\nconst mdl = {\n    name: name,\n    moduleLogic: [googleRequest]\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\ng.runModule(g.getModule(name)).then((moduleResult) => {\n    expect(moduleResult).to.have.property('googleBody');\n    done();\n});",
              "err": {},
              "uuid": "6bf91132-344e-456e-894f-8b661383f901",
              "parentUUID": "d83fe9a5-50fd-4a1b-99ed-920a4b3d40b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert that skip skips the rest of the middleware",
              "fullTitle": "Async modules test should assert that skip skips the rest of the middleware",
              "timedOut": false,
              "duration": 496,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'googleCall';\nconst firstRequest = function(state, next) {\n    requestPromise.get('https://www.google.com/').then((body) => {\n        state.firstRequest = body;\n        next();\n    });\n};\nconst secondRequest = function(state, next, skip) {\n    requestPromise.get('https://www.google.com/').then((body) => {\n        state.secondRequest = body;\n        skip();\n    });\n};\nconst thirdRequest = function(state, next) {\n    requestPromise.get('https://www.google.com/').then((body) => {\n        state.thirdRequest = body;\n        next();\n    });\n};\nconst postLogicTransformer = function(state, next) {\n    state.postLogic = true;\n    next();\n};\nconst mdl = {\n    name: name,\n    moduleLogic: [firstRequest, secondRequest, thirdRequest],\n    postLogicTransformers: [postLogicTransformer]\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\ng.runModule(g.getModule(name)).then((moduleResult) => {\n    expect(moduleResult).to.have.property('firstRequest');\n    expect(moduleResult).to.have.property('secondRequest');\n    expect(moduleResult).to.not.have.property('thirdRequest');\n    expect(moduleResult).to.have.property('postLogic');\n    done();\n});",
              "err": {},
              "uuid": "e88850cf-fb83-4b3a-a67e-9e14fd31b594",
              "parentUUID": "d83fe9a5-50fd-4a1b-99ed-920a4b3d40b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "it should assert that done() exists and does not execute any more middleware",
              "fullTitle": "Async modules test it should assert that done() exists and does not execute any more middleware",
              "timedOut": false,
              "duration": 522,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'googleCall';\nconst firstRequest = function(state, next) {\n    requestPromise.get('https://www.google.com/').then((body) => {\n        state.firstRequest = body;\n        next();\n    });\n};\nconst secondRequest = function(state, next, skip, done) {\n    requestPromise.get('https://www.google.com/').then((body) => {\n        state.secondRequest = body;\n        done();\n    });\n};\nconst thirdRequest = function(state, next) {\n    requestPromise.get('https://www.google.com/').then((body) => {\n        state.thirdRequest = body;\n        next();\n    });\n};\nconst postLogicTransformer = function(state, next) {\n    state.postLogic = true;\n    next();\n};\nconst mdl = {\n    name: name,\n    moduleLogic: [firstRequest, secondRequest, thirdRequest],\n    postLogicTransformers: [postLogicTransformer]\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\ng.runModule(g.getModule(name)).then((moduleResult) => {\n    expect(moduleResult).to.have.property('firstRequest');\n    expect(moduleResult).to.have.property('secondRequest');\n    expect(moduleResult).to.not.have.property('thirdRequest');\n    expect(moduleResult).to.not.have.property('postLogic');\n    done();\n});",
              "err": {},
              "uuid": "6f07361d-6afd-4f08-89a1-8e43ad3019a7",
              "parentUUID": "d83fe9a5-50fd-4a1b-99ed-920a4b3d40b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert that exception throw inside middleware async process is caught and processed",
              "fullTitle": "Async modules test should assert that exception throw inside middleware async process is caught and processed",
              "timedOut": false,
              "duration": 187,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'googleCall';\nconst firstRequest = function(state, next, skip, done, throwException) {\n    requestPromise.get('https://www.google.com/').then((body) => {\n        state.firstRequest = body;\n        throwException(new Error('my exception'));\n    });\n};\nconst secondRequest = function(state, next, skip, done) {\n    requestPromise.get('https://www.google.com/').then((body) => {\n        state.secondRequest = body;\n        done();\n    });\n};\nconst mdl = {\n    name: name,\n    moduleLogic: [firstRequest, secondRequest],\n    postLogicTransformers: []\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\ng.runModule(g.getModule(name)).then((moduleResult) => {\n}).catch((err) => {\n    expect(err.message).to.be.equal('my exception');\n    done();\n});",
              "err": {},
              "uuid": "da291ca5-c64d-40fc-a7f8-ef4517b8ca7f",
              "parentUUID": "d83fe9a5-50fd-4a1b-99ed-920a4b3d40b4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7e817c18-78aa-4361-a83a-c6d124e63408",
            "6bf91132-344e-456e-894f-8b661383f901",
            "e88850cf-fb83-4b3a-a67e-9e14fd31b594",
            "6f07361d-6afd-4f08-89a1-8e43ad3019a7",
            "da291ca5-c64d-40fc-a7f8-ef4517b8ca7f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1817,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "193940f9-72c2-4c0a-80a5-16708084306c",
          "title": "Dependency injection tests",
          "fullFile": "/var/www/gabriela/tests/unit/dependencyInjection.spec.js",
          "file": "/tests/unit/dependencyInjection.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a single dependency",
              "fullTitle": "Dependency injection tests should create a single dependency",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userServiceInit = {\n    name: 'userService',\n    init: function() {\n        function userService() {\n            this.addUser = function() {};\n            this.removeUser = function() {};\n        }\n        return new userService();\n    }\n};\nconst compiler = Compiler.create();\ncompiler.add(userServiceInit);\nconst userService = compiler.compile('userService');\nexpect(userService).to.have.property('addUser');\nexpect(userService).to.have.property('removeUser');\nlet us1 = compiler.compile('userService');\nexpect(userService).to.be.equal(us1);\nexpect(us1 == userService).to.be.equal(true);",
              "err": {},
              "uuid": "6bfaa4f5-37b5-4dfe-ab38-054aba7ed55c",
              "parentUUID": "193940f9-72c2-4c0a-80a5-16708084306c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a tree of dependencies",
              "fullTitle": "Dependency injection tests should create a tree of dependencies",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const commentServiceInit = {\n    name: 'commentService',\n    init: function() {\n        function commentService() {\n            this.addComment = function() {};\n            this.removeComment = function() {};\n        }\n        return new commentService();\n    }\n};\nconst userServiceInit = {\n    name: 'userService',\n    init: function(commentService) {\n        function userService() {\n            this.addUser = function() {};\n            this.removeUser = function() {};\n            this.commentService = commentService;\n        }\n        return new userService();\n    }\n};\nconst compiler = Compiler.create();\ncompiler.add(userServiceInit);\ncompiler.add(commentServiceInit);\nconst userService = compiler.compile('userService');\nexpect(userService).to.have.property('addUser');\nexpect(userService).to.have.property('removeUser');\nexpect(userService).to.have.property('commentService');\nconst commentService = userService.commentService;\nexpect(commentService).to.have.property('addComment');\nexpect(commentService).to.have.property('removeComment');\nlet cs1 = compiler.compile('commentService');\nexpect(cs1 == commentService).to.be.equal(true);",
              "err": {},
              "uuid": "d7a1f75e-b1fe-42a9-a6d2-cebaa9b1e58e",
              "parentUUID": "193940f9-72c2-4c0a-80a5-16708084306c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should resolve dependencies private to a module",
              "fullTitle": "Dependency injection tests should resolve dependencies private to a module",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const commentServiceInit = {\n    name: 'commentService',\n    init: function() {\n        function commentService() {\n            this.addComment = function() {};\n            this.removeComment = function() {};\n        }\n        return new commentService();\n    }\n};\nconst userServiceInit = {\n    name: 'userService',\n    init: function(commentService) {\n        function userService() {\n            this.addUser = function() {};\n            this.removeUser = function() {};\n            this.commentService = commentService;\n        }\n        return new userService();\n    }\n};",
              "err": {},
              "uuid": "5bc5fe4a-9481-4e91-8e38-864cdd52cf27",
              "parentUUID": "193940f9-72c2-4c0a-80a5-16708084306c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should resolve all dependencies with visibility property",
              "fullTitle": "Dependency injection tests should resolve all dependencies with visibility property",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const visibilities = ['module', 'plugin', 'public'];\nlet entersException = false;\nconst compiler = Compiler.create();\nfor (const v of visibilities) {\n    entersException = false;\n    try {\n        compiler.add({\n            name: 'name',\n            visibility: v,\n            init: function() {\n                return () => {};\n            },\n        });\n    } catch (err) {\n        entersException = true;\n    }\n    expect(entersException).to.be.equal(false);\n}",
              "err": {},
              "uuid": "12616f03-3268-43c9-b598-0be0507cd143",
              "parentUUID": "193940f9-72c2-4c0a-80a5-16708084306c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6bfaa4f5-37b5-4dfe-ab38-054aba7ed55c",
            "d7a1f75e-b1fe-42a9-a6d2-cebaa9b1e58e",
            "5bc5fe4a-9481-4e91-8e38-864cdd52cf27",
            "12616f03-3268-43c9-b598-0be0507cd143"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e8403b26-c568-4ae5-8280-860a0395b5d2",
          "title": "Failing server tests",
          "fullFile": "/var/www/gabriela/tests/unit/errors.spec.js",
          "file": "/tests/unit/errors.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should validate server options and throw exception",
              "fullTitle": "Failing server tests should validate server options and throw exception",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let entersException = false;\ntry {\n    gabriela.asServer({\n        port: 'invalid',\n    });\n} catch (err) {\n    entersException = true;\n}\nexpect(entersException).to.be.equal(true);\ntry {\n    gabriela.asServer({\n        port: 3000,\n        runCallback: null,\n    });\n} catch (err) {\n    entersException = true;\n}\nexpect(entersException).to.be.equal(true);",
              "err": {},
              "uuid": "0ce62f37-b967-4f4a-b857-f7c071b37fcf",
              "parentUUID": "e8403b26-c568-4ae5-8280-860a0395b5d2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0ce62f37-b967-4f4a-b857-f7c071b37fcf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9c9bbc2d-562f-4731-ad8d-560e503e4712",
          "title": "Failing DI compiler tests",
          "fullFile": "/var/www/gabriela/tests/unit/errors.spec.js",
          "file": "/tests/unit/errors.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should fail to compile a dependency because init.init does not return a function",
              "fullTitle": "Failing DI compiler tests should fail to compile a dependency because init.init does not return a function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userServiceInit = {\n    name: 'userService',\n    init: function() {\n        // returns nothing\n    }\n};\nconst compiler = Compiler.create();\ncompiler.add(userServiceInit);\nlet entersException = false;\ntry {\n    compiler.compile('userService');\n} catch (err) {\n    entersException = true;\n    expect(err.message).to.be.equal(`Dependency injection error. Target service userService cannot be a falsy value`)\n}\nexpect(entersException).to.be.equal(true);",
              "err": {},
              "uuid": "cf954434-8fe2-4f59-877d-a66f315c36de",
              "parentUUID": "9c9bbc2d-562f-4731-ad8d-560e503e4712",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to compile a dependency because of non existent service",
              "fullTitle": "Failing DI compiler tests should fail to compile a dependency because of non existent service",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let entersException = false;\nconst compiler = Compiler.create();\ntry {\n    compiler.compile('nonExistentService');\n} catch (err) {\n    entersException = true;\n    expect(err.message).to.be.equal(`Dependency injection error. nonExistentService not found in the dependency tree`)\n}\nexpect(entersException).to.be.equal(true);",
              "err": {},
              "uuid": "e28c122a-26df-4f14-8792-b3e8d1f7de9d",
              "parentUUID": "9c9bbc2d-562f-4731-ad8d-560e503e4712",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to compile because init dependency value not being an object",
              "fullTitle": "Failing DI compiler tests should fail to compile because init dependency value not being an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let entersException = false;\nconst compiler = Compiler.create();\ntry {\n    compiler.add(1);\n} catch (err) {\n    entersException = true;\n    expect(err.message).to.be.equal(`Dependency injection error. 'init' dependency value must be an object`);\n}\nexpect(entersException).to.be.equal(true);",
              "err": {},
              "uuid": "80a9c2d5-2b61-4404-9465-61975d85089b",
              "parentUUID": "9c9bbc2d-562f-4731-ad8d-560e503e4712",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to compile a dependency because name property must be a string",
              "fullTitle": "Failing DI compiler tests should fail to compile a dependency because name property must be a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let entersException = false;\nconst compiler = Compiler.create();\ntry {\n    compiler.add({\n        name: 1\n    });\n} catch (err) {\n    entersException = true;\n    expect(err.message).to.be.equal(`Dependency injection error. Init object 'name' property must be a string`);\n}\nexpect(entersException).to.be.equal(true);",
              "err": {},
              "uuid": "1f1428d8-939e-40df-9bbf-8b119812e168",
              "parentUUID": "9c9bbc2d-562f-4731-ad8d-560e503e4712",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to compile a dependency because init.init must be a function",
              "fullTitle": "Failing DI compiler tests should fail to compile a dependency because init.init must be a function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let entersException = false;\nconst compiler = Compiler.create();\ntry {\n    compiler.add({\n        name: 'name',\n        init: 1,\n    });\n} catch (err) {\n    entersException = true;\n    expect(err.message).to.be.equal(`Dependency injection error. Init object 'init' property must be a function`);\n}\nexpect(entersException).to.be.equal(true);",
              "err": {},
              "uuid": "776d2acc-b381-4875-ac4b-a89fd99d0d5f",
              "parentUUID": "9c9bbc2d-562f-4731-ad8d-560e503e4712",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to compile because of invalid service name data type",
              "fullTitle": "Failing DI compiler tests should fail to compile because of invalid service name data type",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let entersException = false;\nconst compiler = Compiler.create();\nlet invalidService = {\n    name: 1,\n};\ntry {\n    compiler.add(invalidService);\n} catch (err) {\n    entersException = true;\n}\nexpect(entersException).to.be.equal(true);",
              "err": {},
              "uuid": "a78753f5-4236-469b-a366-c04da82d96c4",
              "parentUUID": "9c9bbc2d-562f-4731-ad8d-560e503e4712",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cf954434-8fe2-4f59-877d-a66f315c36de",
            "e28c122a-26df-4f14-8792-b3e8d1f7de9d",
            "80a9c2d5-2b61-4404-9465-61975d85089b",
            "1f1428d8-939e-40df-9bbf-8b119812e168",
            "776d2acc-b381-4875-ac4b-a89fd99d0d5f",
            "a78753f5-4236-469b-a366-c04da82d96c4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9c66e2fb-b7c0-4fb1-935a-33dd60ab2ff4",
          "title": "Http request to gabriela",
          "fullFile": "/var/www/gabriela/tests/unit/http.spec.js",
          "file": "/tests/unit/http.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Http request to gabriela \"before all\" hook",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usersListModule = {\n    http: {\n        route: {\n            name: 'usersList',\n            path: '/users',\n            method: 'get',\n        }\n    },\n    name: 'name',\n    moduleLogic: [(state, next, skip, done, throwException, http) => {\n        http.res.send('OK');\n        http.res.end();\n        done();\n    }],\n};\ngabrielaServer = gabriela.asServer({\n    port: 3001,\n    runCallback: () => {\n        done();\n    }\n});\ngabrielaServer.addModule(usersListModule);\ngabrielaServer.runServer();",
              "err": {},
              "uuid": "eff8293f-669a-4590-bcd9-7f3051949420",
              "parentUUID": "9c66e2fb-b7c0-4fb1-935a-33dd60ab2ff4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Http request to gabriela \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "gabrielaServer.closeServer();",
              "err": {},
              "uuid": "c729bf77-8f29-4c1d-ac96-d5540c66b9a9",
              "parentUUID": "9c66e2fb-b7c0-4fb1-935a-33dd60ab2ff4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should accept a GET request and return a response",
              "fullTitle": "Http request to gabriela should accept a GET request and return a response",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "requestPromise('http://11.11.11.12:3001/users').then((body) => {\n    expect(body).to.be.equal('OK');\n    done();\n});",
              "err": {},
              "uuid": "b653e474-5059-4648-bacb-2638950114df",
              "parentUUID": "9c66e2fb-b7c0-4fb1-935a-33dd60ab2ff4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b653e474-5059-4648-bacb-2638950114df"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "35bdb126-17ed-4527-9b1d-7284bb9a4c43",
          "title": "Module tree tests",
          "fullFile": "/var/www/gabriela/tests/unit/syncModules.spec.js",
          "file": "/tests/unit/syncModules.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a module and treat it as a collection",
              "fullTitle": "Module tree tests should create a module and treat it as a collection",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'moduleName';\nconst mdl = {\n    name: name,\n    preLogicTransformers: [function() {}, function() {}],\n    validators: [function() {}],\n    moduleLogic: [function() {}, function() {}, function() {}],\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\nexpect(g.hasModule(name)).to.be.equal(true);\nexpect(g.getModule(name)).to.be.a('object');\nmdl.name = 'someOtherName';\nconst immutableModule = g.getModule(name);\nexpect(immutableModule.name).to.be.equals(name);\nexpect(immutableModule.preLogicTransformers).to.be.a('array');\nexpect(immutableModule.validators).to.be.a('array');\nexpect(immutableModule.moduleLogic).to.be.a('array');\nexpect(immutableModule.preLogicTransformers.length).to.be.equal(2);\n\nfor (const t of immutableModule.preLogicTransformers) {\n    expect(t).to.be.a('function');\n}\nexpect(immutableModule.validators.length).to.be.equal(1);\n\nfor (const t of immutableModule.validators) {\n    expect(t).to.be.a('function');\n}\nexpect(immutableModule.moduleLogic.length).to.be.equal(3);\n\nfor (const t of immutableModule.moduleLogic) {\n    expect(t).to.be.a('function');\n}\nexpect(g.removeModule(name)).to.be.equal(true);\nexpect(g.hasModule(name)).to.be.false;\nexpect(g.getModule(name)).to.be.a('undefined');",
              "err": {},
              "uuid": "da6f3ca8-7f1e-4d83-b827-b1a61e169fac",
              "parentUUID": "35bdb126-17ed-4527-9b1d-7284bb9a4c43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw error when module definition is invalid",
              "fullTitle": "Module tree tests should throw error when module definition is invalid",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let userModule = {};\nlet g = gabriela.asRunner();\nlet entersException = false;\ntry {\n    g.addModule(userModule);\n} catch(err) {\n    entersException = true;\n    expect(err.message).to.be.equal(`Module definition error. Module has to have a 'name' property as a string that has to be unique to the project`);\n}\nexpect(entersException).to.be.equal(true);\nuserModule = {\n    name: 'name',\n    postLogicTransformers: null,\n};\nentersException = false;\ntry {\n    g.addModule(userModule);\n} catch(err) {\n    entersException = true;\n}\nexpect(entersException).to.be.equal(true);\nconst middlewareNames = ['preLogicTransformers', 'postLogicTransformers', 'moduleLogic', 'security'];\nfor (const m of middlewareNames) {\n    userModule = {\n        name: 'name',\n    };\n    userModule[m] = null;\n    entersException = false;\n    try {\n        g.addModule(userModule);\n    } catch (err) {\n        entersException = true;\n    }\n    expect(entersException).to.be.equal(true);\n    userModule[m] = [undefined];\n    entersException = false;\n    try {\n        g.addModule(userModule);\n    } catch (err) {\n        entersException = true;\n    }\n    expect(entersException).to.be.equal(true);\n}",
              "err": {},
              "uuid": "cfa4b5ba-873b-4681-b176-b6ce0ae33b72",
              "parentUUID": "35bdb126-17ed-4527-9b1d-7284bb9a4c43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert that skip skips the single middleware and not all",
              "fullTitle": "Module tree tests should assert that skip skips the single middleware and not all",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'moduleName';\nconst model = {\n    name: 'name',\n    lastName: 'lastName',\n    age: 32\n};\nconst modelCreationTransformer = function(state, next) {\n    state.model = model;\n    next();\n};\nconst ageTransformer = function(state, next, skip) {\n    return skip();\n};\nconst addOption1Property = function(state, next) {\n    state.model.option1 = true;\n    next();\n};\nconst addOption2Property = function(state, next) {\n    state.model.option2 = true;\n    next();\n};\nconst moduleLogic = function(state, next) {\n    state.model.executed = true;\n    next();\n};\nconst mdl = {\n    name: name,\n    preLogicTransformers: [modelCreationTransformer, ageTransformer, addOption1Property, addOption2Property],\n    validators: [],\n    moduleLogic: [moduleLogic],\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\ng.runModule(g.getModule(name)).then((moduleResult) => {\n    expect(moduleResult.model.name).to.be.equal(model.name);\n    expect(moduleResult.model.lastName).to.be.equal(model.lastName);\n    expect(moduleResult.model.age).to.be.equal(32);\n    expect(moduleResult.model.executed).to.be.equal(true);\n    done();\n});",
              "err": {},
              "uuid": "b6abc1fa-d219-4964-9e14-c6b13047cdab",
              "parentUUID": "35bdb126-17ed-4527-9b1d-7284bb9a4c43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert that done skips all middleware and not just the currently executing",
              "fullTitle": "Module tree tests should assert that done skips all middleware and not just the currently executing",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'moduleName';\nconst model = {\n    name: 'name',\n    lastName: 'lastName',\n    age: 32\n}\nconst modelCreationTransformer = function(state, next, skip, done) {\n    state.model = model;\n    done();\n}\nconst ageTransformer = function(state, next, skip) {\n    return skip();\n}\nconst addOption1Property = function(state, next) {\n    state.model.option1 = true;\n    next();\n}\nconst addOption2Property = function(state, next) {\n    state.model.option2 = true;\n    next();\n}\nconst moduleLogic = function(state, next) {\n    state.model.executed = true;\n    next();\n}\nconst mdl = {\n    name: name,\n    preLogicTransformers: [modelCreationTransformer, ageTransformer, addOption1Property, addOption2Property],\n    validators: [],\n    moduleLogic: [moduleLogic],\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\ng.runModule(g.getModule(name)).then((moduleResult) => {\n    expect(moduleResult.model.name).to.be.equal(model.name);\n    expect(moduleResult.model.lastName).to.be.equal(model.lastName);\n    expect(moduleResult.model.age).to.be.equal(32);\n    expect(moduleResult.model).to.not.have.property('executed');\n    expect(moduleResult.model).to.not.have.property('option1');\n    expect(moduleResult.model).to.not.have.property('option2');\n    done();\n});",
              "err": {},
              "uuid": "e60b8985-0e0d-4a23-b571-1761194c3aac",
              "parentUUID": "35bdb126-17ed-4527-9b1d-7284bb9a4c43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert that preLogicTransformers create and modify the model",
              "fullTitle": "Module tree tests should assert that preLogicTransformers create and modify the model",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'moduleName';\nconst model = {\n    name: 'name',\n    lastName: 'lastName',\n    age: 32\n}\nconst modelCreationTransformer = function(state, next) {\n    state.model = model;\n    next();\n}\nconst ageTransformer = function(state, next) {\n    state.model.age = 25;\n    next();\n}\nconst mdl = {\n    name: name,\n    preLogicTransformers: [modelCreationTransformer, ageTransformer],\n    validators: [],\n    moduleLogic: [],\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\ng.runModule(g.getModule(name)).then((moduleResult) => {\n    expect(moduleResult.model.name).to.be.equal(model.name);\n    expect(moduleResult.model.lastName).to.be.equal(model.lastName);\n    expect(moduleResult.model.age).to.be.equal(25);\n});",
              "err": {},
              "uuid": "7b7243d7-dce1-408d-b226-c99931ac2f61",
              "parentUUID": "35bdb126-17ed-4527-9b1d-7284bb9a4c43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert that validators validate the model",
              "fullTitle": "Module tree tests should assert that validators validate the model",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'moduleName';\nconst model = {\n    name: 'name',\n    lastName: 'lastName',\n    age: 32\n}\nconst modelCreationTransformer = function(state, next) {\n    state.model = model;\n    next();\n}\nconst ageValidator = function(state, next) {\n    if (state.model.age > 25) {\n        throw new Error('Invalid models age');\n    }\n    return next();\n}\nconst mdl = {\n    name: name,\n    preLogicTransformers: [modelCreationTransformer],\n    validators: [ageValidator],\n    moduleLogic: [],\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\ng.runModule(g.getModule(name)).then(() => assert.fail('This test should be an error')).catch((err) => {\n    expect(err.message).to.be.equal('Invalid models age');\n});",
              "err": {},
              "uuid": "04c51d6a-e82e-4b8e-a76a-cbaa8d46403d",
              "parentUUID": "35bdb126-17ed-4527-9b1d-7284bb9a4c43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert that the main logic execution is executed",
              "fullTitle": "Module tree tests should assert that the main logic execution is executed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'moduleName';\nconst model = {\n    name: 'name',\n    lastName: 'lastName',\n    age: 32\n}\nconst modelCreationTransformer = function(state, next) {\n    state.model = model;\n    next();\n}\nconst logicExec = function(state, next) {\n    state.model.executed = true;\n    next();\n}\nconst mdl = {\n    name: name,\n    preLogicTransformers: [modelCreationTransformer],\n    validators: [],\n    moduleLogic: [logicExec],\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\ng.runModule(g.getModule(name)).then((moduleResult) => {\n    expect(moduleResult.model.name).to.be.equal(model.name);\n    expect(moduleResult.model.lastName).to.be.equal(model.lastName);\n    expect(moduleResult.model.age).to.be.equal(32);\n    expect(moduleResult.model).to.have.property('executed');\n    expect(moduleResult.model.executed).to.be.equal(true);\n});",
              "err": {},
              "uuid": "3af240b4-2e68-483d-94c2-20f0c09b8833",
              "parentUUID": "35bdb126-17ed-4527-9b1d-7284bb9a4c43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should contain all modules in a tree",
              "fullTitle": "Module tree tests should contain all modules in a tree",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'user';\nconst profileModuleName = 'profile';\nconst userSettingsModuleName = 'userSettings';\nconst user = {\n    email: 'email@gmail.com',\n    name: 'name',\n    lastName: 'lastName',\n    age: 32,\n};\nconst profile = {\n    hobbie: 'Shitting',\n    job: 'Programmer',\n    timezone: 'Europe/Dublin',\n};\nconst userSettings = {\n    colorSetting: 'dark',\n    isInNewsletter: true,\n};\nconst userCreationTransformer = function(state, next) {\n    state.model = user;\n    next();\n};\nconst logicExec = function(state, next) {\n    state.model.executed = true;\n    next();\n};\nconst profileChanged = function(state, next) {\n    state.profile.updatedAt = new Date();\n    next();\n};\nconst timezoneValidator = function(state, next) {\n    if (state.profile.timezone !== 'Europe/Dublin') {\n        throw new Error('Timezone has to be Europe/Dublin');\n    }\n    next();\n}\nconst colorSettingChange = function(state, next) {\n    state.userSettings.colorSetting = 'light';\n    next();\n}\nconst colorSettingValidator = function(state, next) {\n    const valids = ['light', 'dark'];\n    if (!valids.includes(state.userSettings.colorSetting)) {\n        throw new Error('color setting can only be light or dark');\n    }\n    next();\n}\nconst profileModule = {\n    name: profileModuleName,\n    preLogicTransformers: [profileChanged],\n    validators: [timezoneValidator],\n    moduleLogic: [],\n};\nconst userSettingsModule = {\n    name: userSettingsModuleName,\n    preLogicTransformers: [colorSettingChange],\n    validators: [colorSettingValidator],\n    moduleLogic: []\n}\nconst parentModule = {\n    name: name,\n    modules: [profileModule, userSettingsModule],\n    preLogicTransformers: [userCreationTransformer],\n    validators: [],\n    moduleLogic: [logicExec],\n};\nconst g = gabriela.asRunner();\ng.addModule(parentModule);\nexpect(g.parent).to.be.null;\nexpect(g.child).to.be.a('object');\nexpect(g.child.parent).to.be.a('object');\nexpect(g.hasModule(name)).to.be.equal(true);\nexpect(g.child.hasModule(profileModuleName)).to.be.equal(true);\nexpect(g.child.hasModule(userSettingsModuleName)).to.be.equal(true);",
              "err": {},
              "uuid": "fb0e63b3-0e9b-43e4-891b-a267cc9fc43e",
              "parentUUID": "35bdb126-17ed-4527-9b1d-7284bb9a4c43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should run all parent/child modules",
              "fullTitle": "Module tree tests should run all parent/child modules",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'user';\nconst profileModuleName = 'profile';\nconst userSettingsModuleName = 'userSettings';\nconst user = {\n    email: 'email@gmail.com',\n    name: 'name',\n    lastName: 'lastName',\n    age: 32,\n};\nconst profile = {\n    hobbie: 'Shitting',\n    job: 'Programmer',\n    timezone: 'Europe/Dublin',\n};\nconst userSettings = {\n    colorSetting: 'dark',\n    isInNewsletter: true,\n};\nconst userCreationTransformer = function(state, next) {\n    state.model = user;\n    next();\n};\nconst profileCreationTransformer = function(state, next) {\n    state.model = profile;\n    next();\n}\nconst userSettingsCreationTransformer = function(state, next) {\n    state.model = userSettings;\n    next();\n}\nconst logicExec = function(state, next) {\n    state.model.executed = true;\n    next();\n};\nconst profileChanged = function(state, next) {\n    state.model.updatedAt = new Date();\n    next();\n};\nconst timezoneValidator = function(state, next) {\n    if (state.model.timezone !== 'Europe/Dublin') {\n        throw new Error('Timezone has to be Europe/Dublin');\n    }\n    next();\n}\nconst colorSettingChange = function(state, next) {\n    state.model.colorSetting = 'light';\n    next();\n}\nconst postLogicTransformer = function(state, next) {\n    const user = state.model;\n    const profile = state.child.profile.model;\n    const userSettings = state.child.userSettings.model;\n    user.profile = profile;\n    user.userSettings = userSettings;\n    state.user = user;\n    next();\n}\nconst colorSettingValidator = function(state, next) {\n    const valids = ['light', 'dark'];\n    if (!valids.includes(state.model.colorSetting)) {\n        throw new Error('color setting can only be light or dark');\n    }\n    next();\n}\nconst profileModule = {\n    name: profileModuleName,\n    preLogicTransformers: [profileCreationTransformer, profileChanged],\n    validators: [timezoneValidator],\n    moduleLogic: [logicExec],\n};\nconst userSettingsModule = {\n    name: userSettingsModuleName,\n    preLogicTransformers: [userSettingsCreationTransformer, colorSettingChange],\n    validators: [colorSettingValidator],\n    moduleLogic: [logicExec]\n}\nconst parentModule = {\n    name: name,\n    modules: [profileModule, userSettingsModule],\n    preLogicTransformers: [userCreationTransformer],\n    postLogicTransformers: [postLogicTransformer],\n    validators: [],\n    moduleLogic: [logicExec],\n};\nconst g = gabriela.asRunner();\ng.addModule(parentModule);\ng.runModule(parentModule).then((moduleResult) => {\n    expect(moduleResult).to.have.property('user')\n    expect(moduleResult.user.executed).to.be.equal(true);\n    expect(moduleResult.user).to.have.property('profile');\n    expect(moduleResult.user.profile.executed).to.be.equal(true);\n    expect(moduleResult.user).to.have.property('userSettings');\n    expect(moduleResult.user.userSettings.executed).to.be.equal(true);\n});",
              "err": {},
              "uuid": "3b2e37ee-a418-4b91-be7d-6f0a36fc2bb8",
              "parentUUID": "35bdb126-17ed-4527-9b1d-7284bb9a4c43",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should catch an exception thrown inside the middleware function",
              "fullTitle": "Module tree tests should catch an exception thrown inside the middleware function",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const throwsException = function(state, next, skip, done, throwException) {\n    throwException(new Error('my exception'));\n};\nconst mdl = {\n    name: 'name',\n    preLogicTransformers: [throwsException],\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\ng.runModule(mdl).catch((err) => {\n    expect(err.message).to.be.equal('my exception');\n    done();\n})",
              "err": {},
              "uuid": "69de75f8-ca17-4da7-a04a-b93a71bec65b",
              "parentUUID": "35bdb126-17ed-4527-9b1d-7284bb9a4c43",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "da6f3ca8-7f1e-4d83-b827-b1a61e169fac",
            "cfa4b5ba-873b-4681-b176-b6ce0ae33b72",
            "b6abc1fa-d219-4964-9e14-c6b13047cdab",
            "e60b8985-0e0d-4a23-b571-1761194c3aac",
            "7b7243d7-dce1-408d-b226-c99931ac2f61",
            "04c51d6a-e82e-4b8e-a76a-cbaa8d46403d",
            "3af240b4-2e68-483d-94c2-20f0c09b8833",
            "fb0e63b3-0e9b-43e4-891b-a267cc9fc43e",
            "3b2e37ee-a418-4b91-be7d-6f0a36fc2bb8",
            "69de75f8-ca17-4da7-a04a-b93a71bec65b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.1.4"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "/var/www/gabriela/tests/mochaawesome/report",
        "saveHtml": true,
        "saveJson": true,
        "useInlineDiffs": false
      },
      "version": "4.0.0"
    },
    "marge": {
      "options": {
        "reportFilename": "/var/www/gabriela/tests/mochaawesome/report",
        "quiet": true
      },
      "version": "4.0.0"
    }
  }
}