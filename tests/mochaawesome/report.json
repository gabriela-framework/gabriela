{
  "stats": {
    "suites": 6,
    "tests": 28,
    "passes": 28,
    "pending": 0,
    "failures": 0,
    "start": "2019-06-09T08:35:05.661Z",
    "end": "2019-06-09T08:35:06.430Z",
    "duration": 769,
    "testsRegistered": 28,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7c38ac55-2010-488e-a29d-020645004004",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c1109a6a-e683-4b6c-8fc7-6184b489a79e",
          "title": "Async modules test",
          "fullFile": "/var/www/gabriela/tests/unit/asyncModules.spec.js",
          "file": "/tests/unit/asyncModules.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should assert the first time that next proceedes to next middleware with an async function inside middleware",
              "fullTitle": "Async modules test should assert the first time that next proceedes to next middleware with an async function inside middleware",
              "timedOut": false,
              "duration": 136,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'googleCall';\nconst googleRequest = function(state, next) {\n    requestPromise.get('https://www.google.com/').then((body) => {\n        state.googleBody = body;\n        next();\n    });\n};\nconst mdl = {\n    name: name,\n    moduleLogic: [googleRequest]\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\ng.runModule(g.getModule(name)).then((moduleResult) => {\n    expect(moduleResult).to.have.property('googleBody');\n    done();\n});",
              "err": {},
              "uuid": "662814d2-26ba-4c81-a04a-f606505d163c",
              "parentUUID": "c1109a6a-e683-4b6c-8fc7-6184b489a79e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert the second time that next proceedes to next middleware with an async function inside middleware",
              "fullTitle": "Async modules test should assert the second time that next proceedes to next middleware with an async function inside middleware",
              "timedOut": false,
              "duration": 84,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'googleCall';\nconst googleRequest = function(state, next) {\n    requestPromise.get('https://www.google.com/').then((body) => {\n        state.googleBody = body;\n        next();\n    });\n};\nconst mdl = {\n    name: name,\n    moduleLogic: [googleRequest]\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\ng.runModule(g.getModule(name)).then((moduleResult) => {\n    expect(moduleResult).to.have.property('googleBody');\n    done();\n});",
              "err": {},
              "uuid": "8f5668d3-d197-4a83-badd-87eb98e8c1c9",
              "parentUUID": "c1109a6a-e683-4b6c-8fc7-6184b489a79e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert that skip skips the rest of the middleware",
              "fullTitle": "Async modules test should assert that skip skips the rest of the middleware",
              "timedOut": false,
              "duration": 176,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'googleCall';\nconst firstRequest = function(state, next) {\n    requestPromise.get('https://www.google.com/').then((body) => {\n        state.firstRequest = body;\n        next();\n    });\n};\nconst secondRequest = function(state, next, skip) {\n    requestPromise.get('https://www.google.com/').then((body) => {\n        state.secondRequest = body;\n        skip();\n    });\n};\nconst thirdRequest = function(state, next) {\n    requestPromise.get('https://www.google.com/').then((body) => {\n        state.thirdRequest = body;\n        next();\n    });\n};\nconst postLogicTransformer = function(state, next) {\n    state.postLogic = true;\n    next();\n};\nconst mdl = {\n    name: name,\n    moduleLogic: [firstRequest, secondRequest, thirdRequest],\n    postLogicTransformers: [postLogicTransformer]\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\ng.runModule(g.getModule(name)).then((moduleResult) => {\n    expect(moduleResult).to.have.property('firstRequest');\n    expect(moduleResult).to.have.property('secondRequest');\n    expect(moduleResult).to.not.have.property('thirdRequest');\n    expect(moduleResult).to.have.property('postLogic');\n    done();\n});",
              "err": {},
              "uuid": "e0990ac7-eddf-4f0f-833c-b459df708246",
              "parentUUID": "c1109a6a-e683-4b6c-8fc7-6184b489a79e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "it should assert that done() exists and does not execute any more middleware",
              "fullTitle": "Async modules test it should assert that done() exists and does not execute any more middleware",
              "timedOut": false,
              "duration": 187,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'googleCall';\nconst firstRequest = function(state, next) {\n    requestPromise.get('https://www.google.com/').then((body) => {\n        state.firstRequest = body;\n        next();\n    });\n};\nconst secondRequest = function(state, next, skip, done) {\n    requestPromise.get('https://www.google.com/').then((body) => {\n        state.secondRequest = body;\n        done();\n    });\n};\nconst thirdRequest = function(state, next) {\n    requestPromise.get('https://www.google.com/').then((body) => {\n        state.thirdRequest = body;\n        next();\n    });\n};\nconst postLogicTransformer = function(state, next) {\n    state.postLogic = true;\n    next();\n};\nconst mdl = {\n    name: name,\n    moduleLogic: [firstRequest, secondRequest, thirdRequest],\n    postLogicTransformers: [postLogicTransformer]\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\ng.runModule(g.getModule(name)).then((moduleResult) => {\n    expect(moduleResult).to.have.property('firstRequest');\n    expect(moduleResult).to.have.property('secondRequest');\n    expect(moduleResult).to.not.have.property('thirdRequest');\n    expect(moduleResult).to.not.have.property('postLogic');\n    done();\n});",
              "err": {},
              "uuid": "a495381e-8a81-496f-8ae0-560b3c60955c",
              "parentUUID": "c1109a6a-e683-4b6c-8fc7-6184b489a79e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert that exception throw inside middleware async process is caught and processed",
              "fullTitle": "Async modules test should assert that exception throw inside middleware async process is caught and processed",
              "timedOut": false,
              "duration": 92,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'googleCall';\nconst firstRequest = function(state, next, skip, done, throwException) {\n    requestPromise.get('https://www.google.com/').then((body) => {\n        state.firstRequest = body;\n        throwException(new Error('my exception'));\n    });\n};\nconst secondRequest = function(state, next, skip, done) {\n    requestPromise.get('https://www.google.com/').then((body) => {\n        state.secondRequest = body;\n        done();\n    });\n};\nconst mdl = {\n    name: name,\n    moduleLogic: [firstRequest, secondRequest],\n    postLogicTransformers: []\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\ng.runModule(g.getModule(name)).then((moduleResult) => {\n}).catch((err) => {\n    expect(err.message).to.be.equal('my exception');\n    done();\n});",
              "err": {},
              "uuid": "3a0fc169-0e95-411e-a50a-ee9d7fa2841a",
              "parentUUID": "c1109a6a-e683-4b6c-8fc7-6184b489a79e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "662814d2-26ba-4c81-a04a-f606505d163c",
            "8f5668d3-d197-4a83-badd-87eb98e8c1c9",
            "e0990ac7-eddf-4f0f-833c-b459df708246",
            "a495381e-8a81-496f-8ae0-560b3c60955c",
            "3a0fc169-0e95-411e-a50a-ee9d7fa2841a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 675,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b1115ede-cfd8-47a8-aa75-94658b5d57cf",
          "title": "Dependency injection tests",
          "fullFile": "/var/www/gabriela/tests/unit/dependencyInjection.spec.js",
          "file": "/tests/unit/dependencyInjection.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a single dependency",
              "fullTitle": "Dependency injection tests should create a single dependency",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userServiceInit = {\n    name: 'userService',\n    init: function() {\n        function userService() {\n            this.addUser = function() {};\n            this.removeUser = function() {};\n        }\n        return new userService();\n    }\n};\nconst compiler = Compiler.create();\ncompiler.add(userServiceInit);\nconst userService = compiler.compile('userService');\nexpect(userService).to.have.property('addUser');\nexpect(userService).to.have.property('removeUser');\nlet us1 = compiler.compile('userService');\nexpect(userService).to.be.equal(us1);\nexpect(us1 == userService).to.be.equal(true);",
              "err": {},
              "uuid": "1d0e9eca-f002-4933-980c-d3fda70940b3",
              "parentUUID": "b1115ede-cfd8-47a8-aa75-94658b5d57cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a tree of dependencies",
              "fullTitle": "Dependency injection tests should create a tree of dependencies",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const commentServiceInit = {\n    name: 'commentService',\n    init: function() {\n        function commentService() {\n            this.addComment = function() {};\n            this.removeComment = function() {};\n        }\n        return new commentService();\n    }\n};\nconst userServiceInit = {\n    name: 'userService',\n    init: function(commentService) {\n        function userService() {\n            this.addUser = function() {};\n            this.removeUser = function() {};\n            this.commentService = commentService;\n        }\n        return new userService();\n    }\n};\nconst compiler = Compiler.create();\ncompiler.add(userServiceInit);\ncompiler.add(commentServiceInit);\nconst userService = compiler.compile('userService');\nexpect(userService).to.have.property('addUser');\nexpect(userService).to.have.property('removeUser');\nexpect(userService).to.have.property('commentService');\nconst commentService = userService.commentService;\nexpect(commentService).to.have.property('addComment');\nexpect(commentService).to.have.property('removeComment');\nlet cs1 = compiler.compile('commentService');\nexpect(cs1 == commentService).to.be.equal(true);",
              "err": {},
              "uuid": "970fadf5-f82a-446d-a238-c4d2716ca408",
              "parentUUID": "b1115ede-cfd8-47a8-aa75-94658b5d57cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should resolve dependencies private to a module",
              "fullTitle": "Dependency injection tests should resolve dependencies private to a module",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const commentServiceInit = {\n    name: 'commentService',\n    init: function() {\n        function commentService() {\n            this.addComment = function() {};\n            this.removeComment = function() {};\n        }\n        return new commentService();\n    }\n};\nconst userServiceInit = {\n    name: 'userService',\n    init: function(commentService) {\n        function userService() {\n            this.addUser = function() {};\n            this.removeUser = function() {};\n            this.commentService = commentService;\n        }\n        return new userService();\n    }\n};",
              "err": {},
              "uuid": "0e88e6b9-3401-46e4-a5db-9dd1e3d5dbee",
              "parentUUID": "b1115ede-cfd8-47a8-aa75-94658b5d57cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should resolve all dependencies with visibility property",
              "fullTitle": "Dependency injection tests should resolve all dependencies with visibility property",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const visibilities = ['module', 'plugin', 'public'];\nlet entersException = false;\nconst compiler = Compiler.create();\nfor (const v of visibilities) {\n    entersException = false;\n    try {\n        compiler.add({\n            name: 'name',\n            visibility: v,\n            init: function() {\n                return () => {};\n            },\n        });\n    } catch (err) {\n        entersException = true;\n    }\n    expect(entersException).to.be.equal(false);\n}",
              "err": {},
              "uuid": "f4485b2f-215b-452c-a88a-4f32516355b3",
              "parentUUID": "b1115ede-cfd8-47a8-aa75-94658b5d57cf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1d0e9eca-f002-4933-980c-d3fda70940b3",
            "970fadf5-f82a-446d-a238-c4d2716ca408",
            "0e88e6b9-3401-46e4-a5db-9dd1e3d5dbee",
            "f4485b2f-215b-452c-a88a-4f32516355b3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c5fdd641-4e51-414a-9055-9a00f563873d",
          "title": "Failing server tests",
          "fullFile": "/var/www/gabriela/tests/unit/errors.spec.js",
          "file": "/tests/unit/errors.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should validate server options and throw exception",
              "fullTitle": "Failing server tests should validate server options and throw exception",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let entersException = false;\ntry {\n    gabriela.asServer({\n        port: 'invalid',\n    });\n} catch (err) {\n    entersException = true;\n}\nexpect(entersException).to.be.equal(true);\ntry {\n    gabriela.asServer({\n        port: 3000,\n        runCallback: null,\n    });\n} catch (err) {\n    entersException = true;\n}\nexpect(entersException).to.be.equal(true);",
              "err": {},
              "uuid": "1b9210fc-5e95-441c-ad39-f624ab29aee3",
              "parentUUID": "c5fdd641-4e51-414a-9055-9a00f563873d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1b9210fc-5e95-441c-ad39-f624ab29aee3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "14d8c3a0-1112-4fe4-b047-47101c567830",
          "title": "Failing DI compiler tests",
          "fullFile": "/var/www/gabriela/tests/unit/errors.spec.js",
          "file": "/tests/unit/errors.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should fail to compile a dependency because invalid isAsync option type",
              "fullTitle": "Failing DI compiler tests should fail to compile a dependency because invalid isAsync option type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userServiceInit = {\n    name: 'userService',\n    isAsync: 1,\n    init: function() {\n        return () => {};\n    }\n};\nconst compiler = Compiler.create();\nlet entersException = false;\ntry {\n    compiler.add(userServiceInit);\n} catch (err) {\n    entersException = true;\n    expect(err.message).to.be.equal(`Dependency injection error. 'isAsync' option must be a boolean`);\n}\nexpect(entersException).to.be.equal(true);",
              "err": {},
              "uuid": "649aa849-df48-463c-a563-7ad2705c7da2",
              "parentUUID": "14d8c3a0-1112-4fe4-b047-47101c567830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to compile a dependency because init.init does not return a function",
              "fullTitle": "Failing DI compiler tests should fail to compile a dependency because init.init does not return a function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userServiceInit = {\n    name: 'userService',\n    init: function() {\n        // returns nothing\n    }\n};\nconst compiler = Compiler.create();\ncompiler.add(userServiceInit);\nlet entersException = false;\ntry {\n    compiler.compile('userService');\n} catch (err) {\n    entersException = true;\n    expect(err.message).to.be.equal(`Dependency injection error. Target service userService cannot be a falsy value`)\n}\nexpect(entersException).to.be.equal(true);",
              "err": {},
              "uuid": "7bdef713-d801-4a06-bc37-dec330248a10",
              "parentUUID": "14d8c3a0-1112-4fe4-b047-47101c567830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to compile a dependency because of non existent service",
              "fullTitle": "Failing DI compiler tests should fail to compile a dependency because of non existent service",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let entersException = false;\nconst compiler = Compiler.create();\ntry {\n    compiler.compile('nonExistentService');\n} catch (err) {\n    entersException = true;\n    expect(err.message).to.be.equal(`Dependency injection error. nonExistentService not found in the dependency tree`)\n}\nexpect(entersException).to.be.equal(true);",
              "err": {},
              "uuid": "dc31c4ed-d43c-4404-893c-03cee04df958",
              "parentUUID": "14d8c3a0-1112-4fe4-b047-47101c567830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to compile because init dependency value not being an object",
              "fullTitle": "Failing DI compiler tests should fail to compile because init dependency value not being an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let entersException = false;\nconst compiler = Compiler.create();\ntry {\n    compiler.add(1);\n} catch (err) {\n    entersException = true;\n    expect(err.message).to.be.equal(`Dependency injection error. 'init' dependency value must be an object`);\n}\nexpect(entersException).to.be.equal(true);",
              "err": {},
              "uuid": "e5b06212-a060-410d-9b21-d285e34fe1dd",
              "parentUUID": "14d8c3a0-1112-4fe4-b047-47101c567830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to compile a dependency because name property must be a string",
              "fullTitle": "Failing DI compiler tests should fail to compile a dependency because name property must be a string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let entersException = false;\nconst compiler = Compiler.create();\ntry {\n    compiler.add({\n        name: 1\n    });\n} catch (err) {\n    entersException = true;\n    expect(err.message).to.be.equal(`Dependency injection error. Init object 'name' property must be a string`);\n}\nexpect(entersException).to.be.equal(true);",
              "err": {},
              "uuid": "b19cc774-0ec7-430c-9b36-b2acab039de6",
              "parentUUID": "14d8c3a0-1112-4fe4-b047-47101c567830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to compile a dependency because init.init must be a function",
              "fullTitle": "Failing DI compiler tests should fail to compile a dependency because init.init must be a function",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let entersException = false;\nconst compiler = Compiler.create();\ntry {\n    compiler.add({\n        name: 'name',\n        init: 1,\n    });\n} catch (err) {\n    entersException = true;\n    expect(err.message).to.be.equal(`Dependency injection error. Init object 'init' property must be a function`);\n}\nexpect(entersException).to.be.equal(true);",
              "err": {},
              "uuid": "7aeb83de-ae2d-45f0-a3b1-3c8f26f394c6",
              "parentUUID": "14d8c3a0-1112-4fe4-b047-47101c567830",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to compile because of invalid service name data type",
              "fullTitle": "Failing DI compiler tests should fail to compile because of invalid service name data type",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let entersException = false;\nconst compiler = Compiler.create();\nlet invalidService = {\n    name: 1,\n};\ntry {\n    compiler.add(invalidService);\n} catch (err) {\n    entersException = true;\n}\nexpect(entersException).to.be.equal(true);",
              "err": {},
              "uuid": "33fe006e-6d31-4c08-b073-2aec8c4854c9",
              "parentUUID": "14d8c3a0-1112-4fe4-b047-47101c567830",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "649aa849-df48-463c-a563-7ad2705c7da2",
            "7bdef713-d801-4a06-bc37-dec330248a10",
            "dc31c4ed-d43c-4404-893c-03cee04df958",
            "e5b06212-a060-410d-9b21-d285e34fe1dd",
            "b19cc774-0ec7-430c-9b36-b2acab039de6",
            "7aeb83de-ae2d-45f0-a3b1-3c8f26f394c6",
            "33fe006e-6d31-4c08-b073-2aec8c4854c9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "33fc72dd-0b6b-44d2-985b-ac917d91160d",
          "title": "Http request to gabriela",
          "fullFile": "/var/www/gabriela/tests/unit/http.spec.js",
          "file": "/tests/unit/http.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Http request to gabriela \"before all\" hook",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usersListModule = {\n    http: {\n        route: {\n            name: 'usersList',\n            path: '/users',\n            method: 'get',\n        }\n    },\n    name: 'name',\n    moduleLogic: [(state, next, skip, done, throwException, http) => {\n        http.res.send('OK');\n        http.res.end();\n        done();\n    }],\n};\ngabrielaServer = gabriela.asServer({\n    port: 3001,\n    runCallback: () => {\n        done();\n    }\n});\ngabrielaServer.addModule(usersListModule);\ngabrielaServer.runServer();",
              "err": {},
              "uuid": "dcc433e9-8a33-4e2a-8229-75069192a0a3",
              "parentUUID": "33fc72dd-0b6b-44d2-985b-ac917d91160d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Http request to gabriela \"after all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "gabrielaServer.closeServer();",
              "err": {},
              "uuid": "ceb7a3e3-52d8-4bae-a327-cb0b01f8f598",
              "parentUUID": "33fc72dd-0b6b-44d2-985b-ac917d91160d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should accept a GET request and return a response",
              "fullTitle": "Http request to gabriela should accept a GET request and return a response",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "requestPromise('http://11.11.11.12:3001/users').then((body) => {\n    expect(body).to.be.equal('OK');\n    done();\n});",
              "err": {},
              "uuid": "9700a15f-4a1c-4998-939b-bd6cd2b90e6f",
              "parentUUID": "33fc72dd-0b6b-44d2-985b-ac917d91160d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9700a15f-4a1c-4998-939b-bd6cd2b90e6f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "16209e0a-0803-4b54-988b-bb8e57785cf4",
          "title": "Module tree tests",
          "fullFile": "/var/www/gabriela/tests/unit/syncModules.spec.js",
          "file": "/tests/unit/syncModules.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a module and treat it as a collection",
              "fullTitle": "Module tree tests should create a module and treat it as a collection",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'moduleName';\nconst mdl = {\n    name: name,\n    preLogicTransformers: [function() {}, function() {}],\n    validators: [function() {}],\n    moduleLogic: [function() {}, function() {}, function() {}],\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\nexpect(g.hasModule(name)).to.be.equal(true);\nexpect(g.getModule(name)).to.be.a('object');\nmdl.name = 'someOtherName';\nconst immutableModule = g.getModule(name);\nexpect(immutableModule.name).to.be.equals(name);\nexpect(immutableModule.preLogicTransformers).to.be.a('array');\nexpect(immutableModule.validators).to.be.a('array');\nexpect(immutableModule.moduleLogic).to.be.a('array');\nexpect(immutableModule.preLogicTransformers.length).to.be.equal(2);\n\nfor (const t of immutableModule.preLogicTransformers) {\n    expect(t).to.be.a('function');\n}\nexpect(immutableModule.validators.length).to.be.equal(1);\n\nfor (const t of immutableModule.validators) {\n    expect(t).to.be.a('function');\n}\nexpect(immutableModule.moduleLogic.length).to.be.equal(3);\n\nfor (const t of immutableModule.moduleLogic) {\n    expect(t).to.be.a('function');\n}\nexpect(g.removeModule(name)).to.be.equal(true);\nexpect(g.hasModule(name)).to.be.false;\nexpect(g.getModule(name)).to.be.a('undefined');",
              "err": {},
              "uuid": "8b30bd43-045f-474d-984a-6e521b67f3eb",
              "parentUUID": "16209e0a-0803-4b54-988b-bb8e57785cf4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw error when module definition is invalid",
              "fullTitle": "Module tree tests should throw error when module definition is invalid",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let userModule = {};\nlet g = gabriela.asRunner();\nlet entersException = false;\ntry {\n    g.addModule(userModule);\n} catch(err) {\n    entersException = true;\n    expect(err.message).to.be.equal(`Module definition error. Module has to have a 'name' property as a string that has to be unique to the project`);\n}\nexpect(entersException).to.be.equal(true);\nuserModule = {\n    name: 'name',\n    postLogicTransformers: null,\n};\nentersException = false;\ntry {\n    g.addModule(userModule);\n} catch(err) {\n    entersException = true;\n}\nexpect(entersException).to.be.equal(true);\nconst middlewareNames = ['preLogicTransformers', 'postLogicTransformers', 'moduleLogic', 'security'];\nfor (const m of middlewareNames) {\n    userModule = {\n        name: 'name',\n    };\n    userModule[m] = null;\n    entersException = false;\n    try {\n        g.addModule(userModule);\n    } catch (err) {\n        entersException = true;\n    }\n    expect(entersException).to.be.equal(true);\n    userModule[m] = [undefined];\n    entersException = false;\n    try {\n        g.addModule(userModule);\n    } catch (err) {\n        entersException = true;\n    }\n    expect(entersException).to.be.equal(true);\n}",
              "err": {},
              "uuid": "85c85d1c-47b9-4089-b3c8-d99788d629cf",
              "parentUUID": "16209e0a-0803-4b54-988b-bb8e57785cf4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert that skip skips the single middleware and not all",
              "fullTitle": "Module tree tests should assert that skip skips the single middleware and not all",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'moduleName';\nconst model = {\n    name: 'name',\n    lastName: 'lastName',\n    age: 32\n};\nconst modelCreationTransformer = function(state, next) {\n    state.model = model;\n    next();\n};\nconst ageTransformer = function(state, next, skip) {\n    return skip();\n};\nconst addOption1Property = function(state, next) {\n    state.model.option1 = true;\n    next();\n};\nconst addOption2Property = function(state, next) {\n    state.model.option2 = true;\n    next();\n};\nconst moduleLogic = function(state, next) {\n    state.model.executed = true;\n    next();\n};\nconst mdl = {\n    name: name,\n    preLogicTransformers: [modelCreationTransformer, ageTransformer, addOption1Property, addOption2Property],\n    validators: [],\n    moduleLogic: [moduleLogic],\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\ng.runModule(g.getModule(name)).then((moduleResult) => {\n    expect(moduleResult.model.name).to.be.equal(model.name);\n    expect(moduleResult.model.lastName).to.be.equal(model.lastName);\n    expect(moduleResult.model.age).to.be.equal(32);\n    expect(moduleResult.model.executed).to.be.equal(true);\n    done();\n});",
              "err": {},
              "uuid": "c26a38d8-b47e-4f99-9a96-f87a5756ac56",
              "parentUUID": "16209e0a-0803-4b54-988b-bb8e57785cf4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert that done skips all middleware and not just the currently executing",
              "fullTitle": "Module tree tests should assert that done skips all middleware and not just the currently executing",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'moduleName';\nconst model = {\n    name: 'name',\n    lastName: 'lastName',\n    age: 32\n}\nconst modelCreationTransformer = function(state, next, skip, done) {\n    state.model = model;\n    done();\n}\nconst ageTransformer = function(state, next, skip) {\n    return skip();\n}\nconst addOption1Property = function(state, next) {\n    state.model.option1 = true;\n    next();\n}\nconst addOption2Property = function(state, next) {\n    state.model.option2 = true;\n    next();\n}\nconst moduleLogic = function(state, next) {\n    state.model.executed = true;\n    next();\n}\nconst mdl = {\n    name: name,\n    preLogicTransformers: [modelCreationTransformer, ageTransformer, addOption1Property, addOption2Property],\n    validators: [],\n    moduleLogic: [moduleLogic],\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\ng.runModule(g.getModule(name)).then((moduleResult) => {\n    expect(moduleResult.model.name).to.be.equal(model.name);\n    expect(moduleResult.model.lastName).to.be.equal(model.lastName);\n    expect(moduleResult.model.age).to.be.equal(32);\n    expect(moduleResult.model).to.not.have.property('executed');\n    expect(moduleResult.model).to.not.have.property('option1');\n    expect(moduleResult.model).to.not.have.property('option2');\n    done();\n});",
              "err": {},
              "uuid": "f8ab757c-aae9-4474-adb4-ad4507625788",
              "parentUUID": "16209e0a-0803-4b54-988b-bb8e57785cf4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert that preLogicTransformers create and modify the model",
              "fullTitle": "Module tree tests should assert that preLogicTransformers create and modify the model",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'moduleName';\nconst model = {\n    name: 'name',\n    lastName: 'lastName',\n    age: 32\n}\nconst modelCreationTransformer = function(state, next) {\n    state.model = model;\n    next();\n}\nconst ageTransformer = function(state, next) {\n    state.model.age = 25;\n    next();\n}\nconst mdl = {\n    name: name,\n    preLogicTransformers: [modelCreationTransformer, ageTransformer],\n    validators: [],\n    moduleLogic: [],\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\ng.runModule(g.getModule(name)).then((moduleResult) => {\n    expect(moduleResult.model.name).to.be.equal(model.name);\n    expect(moduleResult.model.lastName).to.be.equal(model.lastName);\n    expect(moduleResult.model.age).to.be.equal(25);\n});",
              "err": {},
              "uuid": "8dd79080-108d-432f-baff-50bff5797ac2",
              "parentUUID": "16209e0a-0803-4b54-988b-bb8e57785cf4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert that validators validate the model",
              "fullTitle": "Module tree tests should assert that validators validate the model",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'moduleName';\nconst model = {\n    name: 'name',\n    lastName: 'lastName',\n    age: 32\n}\nconst modelCreationTransformer = function(state, next) {\n    state.model = model;\n    next();\n}\nconst ageValidator = function(state, next) {\n    if (state.model.age > 25) {\n        throw new Error('Invalid models age');\n    }\n    return next();\n}\nconst mdl = {\n    name: name,\n    preLogicTransformers: [modelCreationTransformer],\n    validators: [ageValidator],\n    moduleLogic: [],\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\ng.runModule(g.getModule(name)).then(() => assert.fail('This test should be an error')).catch((err) => {\n    expect(err.message).to.be.equal('Invalid models age');\n});",
              "err": {},
              "uuid": "e5a7bea6-a1bd-44c9-aef3-b5539a1aee10",
              "parentUUID": "16209e0a-0803-4b54-988b-bb8e57785cf4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should assert that the main logic execution is executed",
              "fullTitle": "Module tree tests should assert that the main logic execution is executed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'moduleName';\nconst model = {\n    name: 'name',\n    lastName: 'lastName',\n    age: 32\n}\nconst modelCreationTransformer = function(state, next) {\n    state.model = model;\n    next();\n}\nconst logicExec = function(state, next) {\n    state.model.executed = true;\n    next();\n}\nconst mdl = {\n    name: name,\n    preLogicTransformers: [modelCreationTransformer],\n    validators: [],\n    moduleLogic: [logicExec],\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\ng.runModule(g.getModule(name)).then((moduleResult) => {\n    expect(moduleResult.model.name).to.be.equal(model.name);\n    expect(moduleResult.model.lastName).to.be.equal(model.lastName);\n    expect(moduleResult.model.age).to.be.equal(32);\n    expect(moduleResult.model).to.have.property('executed');\n    expect(moduleResult.model.executed).to.be.equal(true);\n});",
              "err": {},
              "uuid": "ab3a1d4b-e29b-49f7-9ac1-6dff913a952c",
              "parentUUID": "16209e0a-0803-4b54-988b-bb8e57785cf4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should contain all modules in a tree",
              "fullTitle": "Module tree tests should contain all modules in a tree",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'user';\nconst profileModuleName = 'profile';\nconst userSettingsModuleName = 'userSettings';\nconst user = {\n    email: 'email@gmail.com',\n    name: 'name',\n    lastName: 'lastName',\n    age: 32,\n};\nconst profile = {\n    hobbie: 'Shitting',\n    job: 'Programmer',\n    timezone: 'Europe/Dublin',\n};\nconst userSettings = {\n    colorSetting: 'dark',\n    isInNewsletter: true,\n};\nconst userCreationTransformer = function(state, next) {\n    state.model = user;\n    next();\n};\nconst logicExec = function(state, next) {\n    state.model.executed = true;\n    next();\n};\nconst profileChanged = function(state, next) {\n    state.profile.updatedAt = new Date();\n    next();\n};\nconst timezoneValidator = function(state, next) {\n    if (state.profile.timezone !== 'Europe/Dublin') {\n        throw new Error('Timezone has to be Europe/Dublin');\n    }\n    next();\n}\nconst colorSettingChange = function(state, next) {\n    state.userSettings.colorSetting = 'light';\n    next();\n}\nconst colorSettingValidator = function(state, next) {\n    const valids = ['light', 'dark'];\n    if (!valids.includes(state.userSettings.colorSetting)) {\n        throw new Error('color setting can only be light or dark');\n    }\n    next();\n}\nconst profileModule = {\n    name: profileModuleName,\n    preLogicTransformers: [profileChanged],\n    validators: [timezoneValidator],\n    moduleLogic: [],\n};\nconst userSettingsModule = {\n    name: userSettingsModuleName,\n    preLogicTransformers: [colorSettingChange],\n    validators: [colorSettingValidator],\n    moduleLogic: []\n}\nconst parentModule = {\n    name: name,\n    modules: [profileModule, userSettingsModule],\n    preLogicTransformers: [userCreationTransformer],\n    validators: [],\n    moduleLogic: [logicExec],\n};\nconst g = gabriela.asRunner();\ng.addModule(parentModule);\nexpect(g.parent).to.be.null;\nexpect(g.child).to.be.a('object');\nexpect(g.child.parent).to.be.a('object');\nexpect(g.hasModule(name)).to.be.equal(true);\nexpect(g.child.hasModule(profileModuleName)).to.be.equal(true);\nexpect(g.child.hasModule(userSettingsModuleName)).to.be.equal(true);",
              "err": {},
              "uuid": "3438834d-d205-46da-92bc-f66f751eb518",
              "parentUUID": "16209e0a-0803-4b54-988b-bb8e57785cf4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should run all parent/child modules",
              "fullTitle": "Module tree tests should run all parent/child modules",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'user';\nconst profileModuleName = 'profile';\nconst userSettingsModuleName = 'userSettings';\nconst user = {\n    email: 'email@gmail.com',\n    name: 'name',\n    lastName: 'lastName',\n    age: 32,\n};\nconst profile = {\n    hobbie: 'Shitting',\n    job: 'Programmer',\n    timezone: 'Europe/Dublin',\n};\nconst userSettings = {\n    colorSetting: 'dark',\n    isInNewsletter: true,\n};\nconst userCreationTransformer = function(state, next) {\n    state.model = user;\n    next();\n};\nconst profileCreationTransformer = function(state, next) {\n    state.model = profile;\n    next();\n}\nconst userSettingsCreationTransformer = function(state, next) {\n    state.model = userSettings;\n    next();\n}\nconst logicExec = function(state, next) {\n    state.model.executed = true;\n    next();\n};\nconst profileChanged = function(state, next) {\n    state.model.updatedAt = new Date();\n    next();\n};\nconst timezoneValidator = function(state, next) {\n    if (state.model.timezone !== 'Europe/Dublin') {\n        throw new Error('Timezone has to be Europe/Dublin');\n    }\n    next();\n}\nconst colorSettingChange = function(state, next) {\n    state.model.colorSetting = 'light';\n    next();\n}\nconst postLogicTransformer = function(state, next) {\n    const user = state.model;\n    const profile = state.child.profile.model;\n    const userSettings = state.child.userSettings.model;\n    user.profile = profile;\n    user.userSettings = userSettings;\n    state.user = user;\n    next();\n}\nconst colorSettingValidator = function(state, next) {\n    const valids = ['light', 'dark'];\n    if (!valids.includes(state.model.colorSetting)) {\n        throw new Error('color setting can only be light or dark');\n    }\n    next();\n}\nconst profileModule = {\n    name: profileModuleName,\n    preLogicTransformers: [profileCreationTransformer, profileChanged],\n    validators: [timezoneValidator],\n    moduleLogic: [logicExec],\n};\nconst userSettingsModule = {\n    name: userSettingsModuleName,\n    preLogicTransformers: [userSettingsCreationTransformer, colorSettingChange],\n    validators: [colorSettingValidator],\n    moduleLogic: [logicExec]\n}\nconst parentModule = {\n    name: name,\n    modules: [profileModule, userSettingsModule],\n    preLogicTransformers: [userCreationTransformer],\n    postLogicTransformers: [postLogicTransformer],\n    validators: [],\n    moduleLogic: [logicExec],\n};\nconst g = gabriela.asRunner();\ng.addModule(parentModule);\ng.runModule(parentModule).then((moduleResult) => {\n    expect(moduleResult).to.have.property('user')\n    expect(moduleResult.user.executed).to.be.equal(true);\n    expect(moduleResult.user).to.have.property('profile');\n    expect(moduleResult.user.profile.executed).to.be.equal(true);\n    expect(moduleResult.user).to.have.property('userSettings');\n    expect(moduleResult.user.userSettings.executed).to.be.equal(true);\n});",
              "err": {},
              "uuid": "09f9b458-c1df-4ab8-b5ce-6327900adb5b",
              "parentUUID": "16209e0a-0803-4b54-988b-bb8e57785cf4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should catch an exception thrown inside the middleware function",
              "fullTitle": "Module tree tests should catch an exception thrown inside the middleware function",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const throwsException = function(state, next, skip, done, throwException) {\n    throwException(new Error('my exception'));\n};\nconst mdl = {\n    name: 'name',\n    preLogicTransformers: [throwsException],\n};\nconst g = gabriela.asRunner();\ng.addModule(mdl);\ng.runModule(mdl).catch((err) => {\n    expect(err.message).to.be.equal('my exception');\n    done();\n})",
              "err": {},
              "uuid": "b5b01e91-ce44-4e22-b477-5df0b1592fa0",
              "parentUUID": "16209e0a-0803-4b54-988b-bb8e57785cf4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8b30bd43-045f-474d-984a-6e521b67f3eb",
            "85c85d1c-47b9-4089-b3c8-d99788d629cf",
            "c26a38d8-b47e-4f99-9a96-f87a5756ac56",
            "f8ab757c-aae9-4474-adb4-ad4507625788",
            "8dd79080-108d-432f-baff-50bff5797ac2",
            "e5a7bea6-a1bd-44c9-aef3-b5539a1aee10",
            "ab3a1d4b-e29b-49f7-9ac1-6dff913a952c",
            "3438834d-d205-46da-92bc-f66f751eb518",
            "09f9b458-c1df-4ab8-b5ce-6327900adb5b",
            "b5b01e91-ce44-4e22-b477-5df0b1592fa0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.1.4"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "/var/www/gabriela/tests/mochaawesome/report",
        "saveHtml": true,
        "saveJson": true,
        "useInlineDiffs": false
      },
      "version": "4.0.0"
    },
    "marge": {
      "options": {
        "reportFilename": "/var/www/gabriela/tests/mochaawesome/report",
        "quiet": true
      },
      "version": "4.0.0"
    }
  }
}